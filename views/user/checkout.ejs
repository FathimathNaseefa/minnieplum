<%- include("../../views/partials/user/header") %>

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f5f5f5;
        margin: 0;
        padding: 0;
        color: #0F1111;
    }

    .checkout-container {
        display: flex;
        width: 90%;
        max-width: 1200px;
        margin: 20px auto;
        gap: 20px;
    }

    .left-section, .right-section {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 4px;
        border: 1px solid #ddd;
    }

    .left-section {
        flex: 2;
    }

    .right-section {
        flex: 1;
    }

    h2, h3 {
        color: #0F1111;
        font-size: 20px;
        margin-bottom: 15px;
    }

    h4 {
        font-size: 16px;
        color: #0F1111;
        margin-bottom: 10px;
    }

    .order-summary {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 4px;
        border: 1px solid #ddd;
        margin-bottom: 20px;
    }

    .order-summary p {
        margin: 5px 0;
        font-size: 14px;
        color: #565959;
    }

    .order-summary h3 {
        margin-top: 10px;
        font-size: 18px;
        color: #0F1111;
    }

    .payment-method {
        margin-bottom: 20px;
    }

    .payment-method input[type="radio"] {
        margin-right: 10px;
    }

    .payment-method label {
        font-size: 14px;
        color: #0F1111;
    }

    .apply-btn, .submit-btn {
        background-color: #FFD814;
        border: 1px solid #FCD200;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 8px;
        width: 100%;
        font-size: 14px;
        color: #0F1111;
        text-align: center;
        margin-top: 10px;
    }

    .apply-btn:hover, .submit-btn:hover {
        background-color: #F7CA00;
    }

    .address-card {
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 15px;
        margin-bottom: 10px;
        cursor: pointer;
    }

    .address-card:hover {
        background-color: #f9f9f9;
    }

    .address-card h4 {
        margin: 0;
        font-size: 16px;
    }

    .address-card p {
        margin: 5px 0;
        font-size: 14px;
        color: #565959;
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: #fff;
        padding: 20px;
        border-radius: 4px;
        width: 400px;
        max-width: 90%;
    }

    .modal-content button {
        background-color: #FFD814;
        border: 1px solid #FCD200;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 8px;
        font-size: 14px;
        color: #0F1111;
        margin-top: 10px;
    }

    .modal-content button:hover {
        background-color: #F7CA00;
    }

    #addAddressForm {
        display: none;
        margin-top: 20px;
    }

    #addAddressForm input {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
    }

    #addAddressForm button {
        background-color: #FFD814;
        border: 1px solid #FCD200;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 8px;
        font-size: 14px;
        color: #0F1111;
    }

    #addAddressForm button:hover {
        background-color: #F7CA00;
    }
    .error-message {
        color: red;
        font-size: 12px;
        margin-bottom: 10px;
        display: block;
    }
</style>

<div class="checkout-container">
    <div class="left-section">
        <h2>Delivering to <b><%= defaultAddress ? defaultAddress.name : 'Select Address' %></b></h2>
        <p>
            <%= defaultAddress ? `${defaultAddress.addressLine1}, ${defaultAddress.city}, ${defaultAddress.state}, ${defaultAddress.postalCode}, ${defaultAddress.country}` : 'No address selected' %>
        </p>
        <a href="#" onclick="openAddressModal()" style="color: #007185; text-decoration: none;">Change</a> | 
        <a href="#" style="color: #007185; text-decoration: none;">Add delivery instructions</a>

        <!-- Address Selection Modal -->
        <div id="addressModal" class="modal">
            <div class="modal-content">
                <h3>Select Delivery Address</h3>
                <% addresses.forEach(address => { %>
                    <div class="address-card">
                        <input type="radio" name="selectedAddress" value="<%= address._id %>"
                               <%= defaultAddress && defaultAddress._id === address._id ? 'checked' : '' %>
                               onchange="setSelectedAddress('<%= address._id %>', '<%= address.name %>', '<%= address.addressLine1 %>, <%= address.city %>, <%= address.state %> - <%= address.postalCode %>')">
                        <h4><%= address.name %></h4>
                        <p><%= address.addressLine1 %>, <%= address.city %>, <%= address.state %> - <%= address.postalCode %></p>
                        <p><%= address.country %></p>
                        <p>Phone: <%= address.phoneNumber %></p>
                        <form action="/checkout/editAddress/<%= address._id %>" method="GET">
                            <button type="submit" class="edit-btn">Edit</button>
                        </form>
                    </div>
                <% }); %>
                <button onclick="closeAddressModal()">Done</button>
            </div>
        </div>

        <button onclick="showAddAddressForm()" style="background-color: #FFD814; border: 1px solid #FCD200; padding: 10px 15px; cursor: pointer; border-radius: 8px; font-size: 14px; color: #0F1111; margin-top: 10px;">+ Add Address</button>
         


        <br><br>
        <input type="text" id="couponCode" placeholder="Enter coupon code">
<button id="applyCouponBtn" onclick="applyCoupon()">Apply Coupon</button>
<p id="couponMessage"></p>

<p>Order Total: <span id="orderTotal"><%=roundToFixedNumber(totalAmount, 10).toLocaleString('en-IN') %></span></p>
<button id="removeCouponBtn" onclick="removeCoupon()" style="display: <%= appliedCoupon ? 'block' : 'none' %>;">Remove Coupon</button>


        
        <div class="payment-method">
            <input type="radio" name="payment" value="cod" id="cod-option" required> 
            <label for="cod-option">Cash on Delivery (COD)</label><br>
            <p id="codErrorMsg" style="color: red; display: none;">COD is not available for orders above ₹1000.</p>

            <input type="radio" name="payment" value="razorpay" id="razorpay-option" required>
            <label for="razorpay-option">Pay with Razorpay</label><br>
        </div>

        <input type="hidden" id="totalAmount" value="<%= totalAmount %>">

    </div>

    
         


             <div class="right-section">
                <h3>Order Summary</h3>
                <div class="order-summary">
                    <p>Original Total: ₹<%= roundToFixedNumber(originalTotal, 10).toLocaleString('en-IN') %></p>
                    <p>Product Offers: ₹<%= roundToFixedNumber(productOffers.reduce((sum, offer) => sum + offer.discountValue, 0), 10).toLocaleString('en-IN') %></p>
                    <p>Category Offers: ₹<%= roundToFixedNumber(categoryOffers.reduce((sum, offer) => sum + offer.discountValue, 0), 10).toLocaleString('en-IN') %></p>
                    <p>Coupon Discount: ₹<%= roundToFixedNumber(appliedCoupon?.discountValue || 0, 10).toLocaleString('en-IN') %></p>
                    <p>Delivery: ₹0</p>
                    <p>Cash/Pay on Delivery Fee: ₹0</p>
                    <h3>Order Total: ₹<%= roundToFixedNumber(totalAmount, 10).toLocaleString('en-IN') %></h3>
                </div>
            
        
        
        
        
        <form id="orderForm" action="/checkout/createOrder" method="POST" onsubmit="return handlePayment(event)">
            <input type="hidden" id="selectedAddressId" name="addressId" value="<%= defaultAddress ? defaultAddress._id : '' %>">
            <input type="hidden" name="paymentMethod" id="selectedPaymentMethod">
            <input type="hidden" id="appliedCoupon" name="appliedCoupon"> 
            <input type="hidden" id="productOfferDiscount" name="productOfferDiscount" value="0">
            <input type="hidden" id="categoryOfferDiscount" name="categoryOfferDiscount" value="0">

            <input type="hidden" id="discountAmount" name="discountAmount" value="0">
        
            <button type="submit" class="submit-btn">Place Order</button>
        
        </form>
    </div>
</div>





<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
document.getElementById("razorpay-option").addEventListener("click", async () => {
  const amount = document.getElementById("totalAmount").value;
  
  const response = await fetch("/payment/create-razorpayorder", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ amount, currency: "INR" }),
  });

  const data = await response.json();

  if (data.success) {
    const options = {
      key: process.env.RAZORPAY_KEY_ID,
      amount: data.order.amount,
      currency: data.order.currency,
      order_id: data.order.id,
      handler: async function (response) {
        const verifyResponse = await fetch("/payment/verify-payment", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(response),
        });

        const verifyData = await verifyResponse.json();

        if (verifyData.success) {
          alert("Payment successful!");

          // Download invoice
          fetch("/payment/download-invoice", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              orderId: data.order.id,
              amount: amount,
              paymentId: response.razorpay_payment_id,
            }),
          })
          .then((res) => res.blob())
          .then((blob) => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = `invoice_${data.order.id}.pdf`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
          });
        } else {
          alert("Payment verification failed!");
        }
      },
    };

    const rzp = new Razorpay(options);
    rzp.open();
  } else {
    alert("Error creating payment order!");
  }
});




function openAddressModal() {
    document.getElementById('addressModal').style.display = 'flex';
}

function closeAddressModal() {
    document.getElementById('addressModal').style.display = 'none';
}

function setSelectedAddress(id, name, details) {
    document.querySelector("h2").innerHTML = `Delivering to <b>${name}</b>`;
    document.querySelector("p").innerText = details;
    document.getElementById("selectedAddressId").value = id;
    closeAddressModal();
}




document.querySelectorAll('input[name="payment"]').forEach(radio => {
    radio.addEventListener('change', function () {
        document.getElementById('selectedPaymentMethod').value = this.value;
    });
});



function handlePayment(event) {
    event.preventDefault(); // Prevent default form submission
    const selectedMethod = document.querySelector('input[name="payment"]:checked')?.value;

    if (!selectedMethod) {
        alert("Please select a payment method.");
        return false;
    }

    const orderTotalText = document.getElementById("orderTotal").innerText;
    console.log("🛠 Displayed Order Total:", orderTotalText);

    // ✅ Fix: Remove currency symbols and commas before parsing
    const cleanedText = orderTotalText.replace(/[^\d.]/g, "");  
    const amount = parseFloat(cleanedText);

    console.log("💰 Extracted Amount Before Sending:", amount);

    if (selectedMethod === "razorpay") {
        fetch('/create-razorpayorder', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ amount, currency: "INR" }) // ✅ Correct key
        })
        .then(response => response.json())
        .then(data => {
            console.log("🚀 Razorpay Order API Response:", data);

            var options = {
                "key": "<%= process.env.RAZORPAY_KEY_ID %>", 
                "amount": data.order.amount,
                "currency": data.order.currency,
                "order_id": data.order.id,
                "handler": function (response) {
                    alert("Payment Successful!");
                    document.getElementById("orderForm").submit();
                },
                "theme": { "color": "#3399cc" },
                "method": { "upi": true, "wallet": true }
            };
            var rzp1 = new Razorpay(options);
            rzp1.open();
        })
        .catch(error => console.error('Error:', error));
        return false; // Prevents form submission until Razorpay succeeds
    }

    document.getElementById("orderForm").submit();
}




function applyCoupon() {
    const couponCodeInput = document.getElementById("couponCode");
    const orderTotalElement = document.getElementById("orderTotal");
    const couponMessageElement = document.getElementById("couponMessage");
    const discountAmountInput = document.getElementById("discountAmount");

    if (!couponCodeInput || !orderTotalElement || !couponMessageElement || !discountAmountInput) {
        console.error("Missing elements!");
        return;
    }

    const couponCode = couponCodeInput.value.trim();
    const totalAmount = parseFloat(orderTotalElement.innerText.replace("₹", "").trim());

    if (!couponCode) {
        alert("Please enter a coupon code!");
        return;
    }

    fetch('/apply-coupon', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ couponCode, totalAmount })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const newTotal = data.newTotal;
            const discount = data.discountAmount;

            // Update the order summary
            document.querySelector(".order-summary").innerHTML = `
                <p>Original Total: ₹<%= originalTotal %></p>
                <p>Product Offers: ₹<%= totalDiscount %></p>
                <p>Coupon Discount: ₹${discount}</p>
                <p>Delivery: ₹0</p>
                <p>COD Fee: ₹0</p>
                <h3>Order Total: ₹${newTotal}</h3>
            `;

            // Update the order total
            orderTotalElement.innerText = "₹" + newTotal.toLocaleString('en-IN');
            couponMessageElement.innerText = `Coupon Applied! You saved ₹${discount}`;
            document.getElementById("removeCouponBtn").style.display = "block";

            // Update hidden fields for form submission
            document.getElementById("discountAmount").value = discount;
            document.getElementById("appliedCoupon").value = couponCode;
        } else {
            couponMessageElement.innerText = data.message;
        }
    })
    .catch(error => console.error("Fetch error:", error));
}

function removeCoupon() {
    fetch('/remove-coupon', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ totalAmount: <%= originalTotal %> })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.querySelector(".order-summary").innerHTML = `
                <p>Original Total: ₹<%= originalTotal %></p>
                <p>Product Offers: ₹<%= totalDiscount %></p>
                <p>Delivery: ₹0</p>
                <p>COD Fee: ₹0</p>
                <h3>Order Total: ₹<%= originalTotal - totalDiscount %></h3>
            `;

            document.getElementById("orderTotal").innerText = "₹" + (<%= originalTotal - totalDiscount %>);
            document.getElementById("couponMessage").innerText = "Coupon removed!";
            document.getElementById("couponCode").value = "";
            document.getElementById("removeCouponBtn").style.display = "none";
        }
    })
    .catch(error => console.error("Error:", error));
}



function placeOrder() {
    const appliedCoupon = sessionStorage.getItem("appliedCoupon") || null;
    const discountAmount = sessionStorage.getItem("discountAmount") || 0;

    fetch('/create-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            addressId: selectedAddressId,
            paymentMethod: selectedPaymentMethod,
            appliedCoupon: appliedCoupon,
            discountAmount: discountAmount  // ✅ Send discountAmount to backend
        })
    })
    .then(response => response.json())
    .then(data => console.log("📩 Server Response:", data))
    .catch(error => console.error("❌ Fetch error:", error));
}




document.addEventListener("DOMContentLoaded", function () {
    const orderTotalElement = document.getElementById("orderTotal");
    const codOption = document.getElementById("cod-option");

    if (orderTotalElement && codOption) {
        const orderTotalText = orderTotalElement.innerText.replace("₹", "").trim();
        const orderTotal = parseFloat(orderTotalText);

        if (orderTotal > 1000) {
            codOption.disabled = true; // Disable COD option
            codOption.nextElementSibling.style.color = "#ccc"; // Gray out the label
            alert("Cash on Delivery (COD) is not available for orders above ₹1000. Please select another payment method.");
        }
    }
});



document.addEventListener("DOMContentLoaded", function () {
    const codOption = document.getElementById("cod-option");
    const codErrorMsg = document.getElementById("codErrorMsg");
    const placeOrderBtn = document.getElementById("placeOrderBtn");
    
    // Ensure totalAmount is correctly parsed
    const totalAmountText = document.getElementById("orderTotal").innerText;
    const totalAmount = parseFloat(totalAmountText.replace(/[^\d.]/g, ""));

    if (totalAmount > 1000) {
        // Disable COD option
        codOption.disabled = true;
        codErrorMsg.style.display = "block";

        // If COD was selected before, unselect it and disable the button
        if (codOption.checked) {
            codOption.checked = false;
        }

        // Disable Place Order button if COD is the only option (Optional)
        placeOrderBtn.disabled = true;
    }
});




</script>
<%- include("../../views/partials/user/footer") %>
